" =============================================================================
"        << 判断操作系统是 Windows 还是 Linux 和判断是终端还是 Gvim >>
" =============================================================================

let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif

if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif

" -----------------------------------------------------------------------------
"  < Windows Gvim 默认配置> 做了一点修改
" -----------------------------------------------------------------------------
"windows&GVIM cfg{
	if (g:iswindows && g:isGUI)
	    source $VIMRUNTIME/vimrc_example.vim
	    source $VIMRUNTIME/mswin.vim
	    behave mswin
	    set diffexpr=MyDiff()

	    function MyDiff()
	        let opt = '-a --binary '
	        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
	        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
	        let arg1 = v:fname_in
	        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
	        let arg2 = v:fname_new
	        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
	        let arg3 = v:fname_out
	        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
	        let eq = ''
	        if $VIMRUNTIME =~ ' '
	            if &sh =~ '\<cmd'
	                let cmd = '""' . $VIMRUNTIME . '\diff"'
	                let eq = '"'
	            else
	                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
	            endif
	        else
	            let cmd = $VIMRUNTIME . '\diff'
	        endif
	        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
	    endfunction
	endif
"} /* windows&GVIM cfg end */

" -----------------------------------------------------------------------------
"  < Linux Gvim/Vim 默认配置> 做了一点修改
" -----------------------------------------------------------------------------
"Linux&GVIM cfg {
	if g:islinux
	    set hlsearch        "高亮搜索
	    set incsearch       "在输入要搜索的文字时，实时匹配

	    " Uncomment the following to have Vim jump to the last position when
	    " reopening a file
	    if has("autocmd")
	        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
	    endif

	    if g:isGUI
	        " Source a global configuration file if available
	        if filereadable("/etc/vim/gvimrc.local")
	            source /etc/vim/gvimrc.local
	        endif
	    else
	        " This line should not be removed as it ensures that various options are
	        " properly set to work with the Vim-related packages available in Debian.
	        runtime! debian.vim

	        " Vim5 and later versions support syntax highlighting. Uncommenting the next
	        " line enables syntax highlighting by default.
	        if has("syntax")
	            syntax on
	        endif

	        set mouse=a                    " 在任何模式下启用鼠标
	        set t_Co=256                   " 在终端启用256色
	        set backspace=2                " 设置退格键可用

	        " Source a global configuration file if available
	        if filereadable("/etc/vim/vimrc.local")
	            source /etc/vim/vimrc.local
	        endif
	    endif
	endif
"} /* Linux&GVIM cfg end */


" --------------------------------------------------------------
"    		 user   settings
" --------------------------------------------------------------

"Vundle cfg {
	" ----------------------------------------------------------
	"  < Vundle 插件管理工具配置
	" --------------------------------------------------------------
	" 用于更方便的管理vim插件，具体用法参考 :h vundle 帮助
	" 安装方法为在终端输入如下命令
	" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
	" 如果想在 windows 安装就必需先安装 "git for window"，可查阅网上资料

	set nocompatible                                      "禁用 Vi 兼容模式
	filetype off                                          "禁用文件类型侦测

	if g:islinux
	    set rtp+=~/.vim/bundle/vundle/
	    call vundle#rc()
	else
	    "此处规定Vundle的路径
	    set rtp+=$VIM/vimfiles/bundle/vundle/
	    "此处规定插件的安装路径
	    call vundle#rc('$VIM/vimfiles/bundle/')
	endif

	" 使用Vundle来管理Vundle，这个必须要有。
	Bundle 'gmarik/vundle'

	Bundle 'a.vim'
	Bundle 'taglist.vim'

	"this statusline vim scripts modified by liming
	Bundle 'statusline.vim'

	"this DoxygenToolkit vim scripts modified by liming
	Bundle 'DoxygenToolkit.vim'
	Bundle 'altercation/vim-colors-solarized'
	Bundle 'TxtBrowser'
	Bundle 'The-NERD-tree'
	Bundle 'The-NERD-commenter'

	"this minibuf vim scripts modified by liming
	Bundle 'minibufexpl.vim'

	Bundle 'grep.vim'
	Bundle 'bronson/vim-trailing-whitespace'

	"windows install YCM too complictated
	Bundle 'git@github.com:Valloric/YouCompleteMe.git'
	Bundle 'Valloric/ListToggle'

	"Bundle 'Shougo/neocomplete'
	"Bundle 'OmniCppComplete'
	Bundle 'scrooloose/syntastic'
	Bundle 'ultisnips'

	Bundle 'ctrlp.vim'
	Bundle 'mru.vim'
	Bundle 'YankRing.vim'
	Bundle 'Lokaltog/vim-easymotion'
	Bundle 'godlygeek/tabular'


"}

"General settings cfg {
	"default workdir for gvim
	lcd G:\work\

	"To disable swap and backup files
	set nobackup
	set nowritebackup
	set noswapfile

	set nocompatible
	filetype on                          "启用文件类型侦测
	filetype plugin on                   "针对不同的文件类型加载对应的插件
	filetype plugin indent on            "启用缩进
	set completeopt=longest,menu

	syntax on
	syntax enable
	set number          " 显示行号
	set cursorline      " 突出显示当前行
	set tabstop=4       " 设置tab键的宽度
	set backspace=2     " 设置退格键可用
	set smarttab                     "指定按一次backspace就删除shiftwidth宽度的空格
	set foldenable                   "启用折叠
	set foldmethod=indent            "indent 折叠方式
	" set foldmethod=marker          "marker 折叠方式

	set showmatch       " 设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号
	set smartindent     " 智能对齐方式
	set shiftwidth=4    " 设置自动对齐空格数
	set autoindent      " 自动对齐
	set cindent
	set ai!             " 设置自动缩进
	"set expandtab "将Tab键自动转换成空格 真正需要Tab键时使用[Ctrl + V + Tab]

	set t_Co=256 "指定配色方案为256色
	set ignorecase "设置搜索时忽略大小写

	set encoding=utf-8                                    "设置gvim内部编码
	set fileencoding=utf-8                                "设置当前文件编码
	set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1     "设置支持打开的文件的编码

	set fileformat=unix                    "设置新文件的<EOL>格式
	set fileformats=unix,dos,mac           "给出文件的<EOL>格式类型

	"set guifont=courier_new:h11:cANSI
	set guifont=Consolas:h12
	if (g:iswindows && g:isGUI)
	    "解决菜单乱码
	    source $VIMRUNTIME/delmenu.vim
	    source $VIMRUNTIME/menu.vim

	    "解决consle输出乱码
	    language messages zh_CN.utf-8
	endif


	"imap <c-k> <Up>     " Ctrl + K 插入模式下光标向上移动
	"imap <c-j> <Down>   " Ctrl + J 插入模式下光标向下移动
	"imap <c-h> <Left>   " Ctrl + H 插入模式下光标向左移动
	"imap <c-l> <Right>  " Ctrl + L 插入模式下光标向右移动
	" Switching between buffers.
	noremap <C-h> <C-W>h
	noremap <C-j> <C-W>j
	noremap <C-k> <C-W>k
	noremap <C-l> <C-W>l
	inoremap <C-h> <ESC><C-W>h
	inoremap <C-j> <ESC><C-W>j
	inoremap <C-k> <ESC><C-W>k
	inoremap <C-l> <ESC><C-W>l


	set nowrap                   "设置不自动换行
	set shortmess=atI            "去掉欢迎界面
	set showcmd    "在状态栏显示目前所执行的指令，未完成的指令片段亦会显示出来
	set nolinebreak "在单词中间断行
	set hidden    "允许在有未保存的修改时切换缓冲区，此时的修改由切换由 vim 负责保存
	set autoread  "当外部修改文件时 vim自动加载
	set formatoptions=tcqro "使得注释换行时自动加上前导的空格和星号

	if g:isGUI
    " au GUIEnter * simalt ~x          "窗口启动时自动最大化
    winpos 100 10                      "指定窗口出现的位置，坐标原点在屏幕左上角
    set lines=38 columns=120           "指定窗口大小，lines为高度，columns为宽度
	endif

	" 显示/隐藏菜单栏、工具栏、滚动条，可用 Ctrl + F11 切换
	if g:isGUI
	    set guioptions-=m
	    set guioptions-=T
	    set guioptions-=r
	    set guioptions-=L
	    map <silent> <c-F11> :if &guioptions =~# 'm' <Bar>
	        \set guioptions-=m <Bar>
	        \set guioptions-=T <Bar>
	        \set guioptions-=r <Bar>
	        \set guioptions-=L <Bar>
	    \else <Bar>
	        \set guioptions+=m <Bar>
	        \set guioptions+=T <Bar>
	        \set guioptions+=r <Bar>
	        \set guioptions+=L <Bar>
	    \endif<CR>
	endif

	" 每行超过80个的字符用下划线标示
	au BufRead,BufNewFile *.asm,*.c,*.cpp,*.java,*.cs,*.sh,*.lua,*.pl,*.pm,*.py,*.rb,*.hs,*.vim 2match Underlined /.\%>81v/

	"自定义关联文件类型
	au BufNewFile,BufRead *.less set filetype=css
	au BufNewFile,BufRead *.phtml set filetype=php
	au BufRead,BufNewFile *.js set ft=javascript.jquery

	"au! bufRead * normal zR "打开折叠...

	" 常规模式下输入 cS 清除行尾空格
	nmap cS :%s/\s\+$//g<CR>:noh<CR>

	" 常规模式下输入 cM 清除行尾 ^M 符号
	nmap cM :%s/\r$//g<CR>:noh<CR>

	" 用空格键来开关折叠
	nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

	nmap <silent> ihs :set invhlsearch<CR>
	"imap <silent> <S-f> input("/")  "<C-C> ctrl+c相当于ESC
	noremap <silent> <C-q> :q<CR>
	inoremap <silent> <c-q> <ESC> :q<CR>
"} /*Global settings cfg end*/


"solarized cfg {
	let g:solarized_termtrans=1
	let g:solarized_contrast="normal"
	let g:solarized_visibility="normal"
	let g:solarized_termcolors = 256
	colorscheme solarized
	set background=dark

"}


"NERD-tree cfg {
	let g:NERDTree_title="[NERDTree]"
	let NERDTreeChDirMode=2
	let NERDTreeWinPos ="left"
	let NERDTreeShowBookmarks=1
	"let NERDTreeDirArrows=1
	let NERDTreeWinSize=22
	let NERDTreeQuitOnOpen=1 "打开文件时关闭树
	"let NERDTreeMinimalUI=1
	map <silent> ne :NERDTreeToggle<cr>
	function! NERDTree_Start()
	    exec 'NERDTree'
	endfunction

	function! NERDTree_IsValid()
	    return 1
	endfunction

	"help for NERDTree
	"  o 打开关闭文件或者目录
	"  t 在标签页中打开
	"  T 在后台标签页中打开
	"  ! 执行此文件
	"  p 到上层目录
	"  P 到根目录
	"  K 到第一个节点
	"  J 到最后一个节点
	"  u 打开上层目录
	"  m 显示文件系统菜单（添加、删除、移动操作）
	"  ? 帮助
	"  q 关闭
	"  r刷新目录树
	" :Bookmark <name>
	"    将选中结点添加到书签列表中，并命名为name（书签名不可包含空格）；
	"    如与现有书签重名，则覆盖现有书签。
	":BookmarkToRoot <bookmark>
	"    以指定目录书签或文件书签的父目录作为根结点显示NerdTree
	":RevealBookmark <bookmark>
	"    如果指定书签已经存在于当前目录树下，打开它的上层结点并选中该书签
	":OpenBookmark <bookmark>
	"    打开指定的文件。（参数必须是文件书签）
	"    如果该文件在当前的目录树下，则打开它的上层结点并选中该书签
	":ClearBookmarks [<bookmarks>]
	"    清除指定书签；如未指定参数，则清除所有书签
	":ClearAllBookmarks
	"    清除所有书签
	":ReadBookmarks
	"    重新读入'NERDTreeBookmarksFile'中的所有书签

"}

"ctags cfg {
	set autochdir   "when not found,auto find tags in parent dir
	set tags=tags;
	"generate tags file
	map <silent> <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
	imap <silent> <C-F12> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
	map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
	imap <A-]> <ESC> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
	map <C-]> :sp <CR>:exec("tag ".expand("<cword>"))<CR>
	imap <C-]> <ESC> :sp <CR>:exec("tag ".expand("<cword>"))<CR>
	"vsplit right not default left
	set splitright
"}

"Taglist cfg {
	let Tlist_Show_One_File =1
	let Tlist_Exit_OnlyWindow =1
	let Tlist_Use_Right_Window =1
	let Tlist_GainFocus_On_ToggleOpen = 1
	let Tlist_Close_On_Select=1
	let Tlist_Process_File_Always = 1
	"let Tlist_WinHeight = 30
	let Tlist_WinWidth = 30
	let Tlist_Inc_Winwidth=0
	map <silent> tl :TlistToggle<cr>
"}

"DoxygenToolkit cfg {
	let g:DoxygenToolkit_authorName="Li Ming <Lee.dhucst@gmail.com>"
	let g:DoxygenToolkit_authorName= g:DoxygenToolkit_authorName
	let g:DoxygenToolkit_paramTag_pre="@Param "
	"let g:DoxygenToolkit_briefTag_funcName="yes"
	let g:doxygen_enhanced_color=1
	nnoremap <F4> : Dox <CR>
	nnoremap <C-F4> : DoxAuthor<CR>
	autocmd BufNewFile *.{h,hpp,c,cpp} DoxAuthor
"}

"minibufexpl cfg {
	let g:miniBufExplMapWindowNavVim = 1
	let g:miniBufExplMapWindowNavArrows = 1
	let g:miniBufExplMapCTabSwitchBufs = 1
	let g:miniBufExplModSelTarget = 1
	let g:miniBufExplMoreThanOne=0
	let g:miniBufExplForceSyntaxEnable=1
"}

"Nerd-tree commenter cfg{
	let mapleader = ","
	" ,c<space>     " comment <--> uncomment.
	" ,cm           " 以段作为单位进行注释.
	" ,cs           " 简洁美观式注释.
	" ,cy           " Same as ,cc except that the commented line(s) are yanked first.
	" ,c$           " 注释当前光标到行未的内容.
	" ,cA           " 在行尾进行手动输入注释内容.
	" ,ca           " 切换注释方式(/**/ <--> //).
	" ,cl           " Same cc, 并且左对齐.
	" ,cb           " Same cc, 并且两端对齐.
	" ,cu           " Uncomments the selected line(s).
"}

"a.vim cfg{
	"switch .h and related .c
	"vsplit
	"nnoremap <silent> <F12> :AV<CR>
	"split
	nnoremap <silent> <F12> :AS<CR>
"}

"grep cfg{
	"press F3 can use Grep cmd to find words, in windows, you
	"have to download the grep.exe and put it into the vim74/
	"ctrl+w+enter open a new window when you use quickfix to jump
	let Grep_Skip_Dirs = 'RCS CVS SCCS .git .svn'
	let Grep_Skip_Files = 'tags *.pyc *.obj *.out *.bak *~ *.swp *.log *.o *.a *.so'
	let Grep_Default_Options = '-i'
	let Grep_Default_Filelist = '*.c *.cpp *.py *.pyw *.h'
	nnoremap <silent> <F3> :Grep<CR>
	map <silent> cw :botright cwindow<cr>
	map <silent> cn :cn<cr>
	map <silent> cp :cp<cr>
	map <silent> cl :ccl<cr>

"}

"cscope cfg{
	set cscopequickfix=s-,c-,d-,i-,t-,e-
	"add cscope.out , assume in upward dir
	"dir /s /b *.c *.h > cscope.files
	"cscope -Rbq -i cscope.files
	"cs add \cscope.out

	"ctrl+\: 然后按下对应的g或者s等即可
	"cscope插件热键
	nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

	"s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
	"g: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
	"d: 查找本函数调用的函数
	"c: 查找调用本函数的函数
	"t: 查找指定的字符串
	"e: 查找egrep模式，相当于egrep功能，但查找速度快多了
	"f: 查找并打开文件，类似vim的find功能
	"i: 查找包含本文件的文件
"}

"gvim gui cfg {
	" -----------------------------------------------------------------------------
	"  < gvimfullscreen 工具配置 > 请确保已安装了工具
	" -----------------------------------------------------------------------------
	" 用于 Windows Gvim 全屏窗口，可用 F11 切换
	" 全屏后再隐藏菜单栏、工具栏、滚动条效果更好
	if (g:iswindows && g:isGUI)
	    map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
	endif

	" -----------------------------------------------------------------------------
	"  < vimtweak 工具配置 > 请确保以已装了工具
	" -----------------------------------------------------------------------------
	" 这里只用于窗口透明与置顶
	" 常规模式下 Ctrl + Up（上方向键） 增加不透明度，Ctrl + Down（下方向键） 减少不透明度，<Leader>t 窗口置顶与否切换
	au! GUIEnter * call libcallnr("vimtweak.dll","SetAlpha", 225)
	if (g:iswindows && g:isGUI)
	    let g:Current_Alpha = 180
	    let g:Top_Most = 0
	    func! Alpha_add()
	        let g:Current_Alpha = g:Current_Alpha + 10
	        if g:Current_Alpha > 255
	            let g:Current_Alpha = 255
	        endif
	        call libcallnr("vimtweak.dll","SetAlpha",g:Current_Alpha)
	    endfunc
	    func! Alpha_sub()
	        let g:Current_Alpha = g:Current_Alpha - 10
	        if g:Current_Alpha < 155
	            let g:Current_Alpha = 155
	        endif
	        call libcallnr("vimtweak.dll","SetAlpha",g:Current_Alpha)
	    endfunc
	    func! Top_window()
	        if  g:Top_Most == 0
	            call libcallnr("vimtweak.dll","EnableTopMost",1)
	            let g:Top_Most = 1
	        else
	            call libcallnr("vimtweak.dll","EnableTopMost",0)
	            let g:Top_Most = 0
	        endif
	    endfunc

	    "快捷键设置
	    map <c-up> :call Alpha_add()<CR>
	    map <c-down> :call Alpha_sub()<CR>
	    map <leader>t :call Top_window()<CR>
	endif
"}

"neocomplete cfg {


"}

"OmniCppComplete cfg {

"}

"syntastic cfg {
	"let g:syntastic_check_on_open = 0
	"let g:syntastic_cpp_include_dirs = ['/usr/include/']
	"let g:syntastic_cpp_remove_include_errors = 1
	"let g:syntastic_cpp_check_header = 1
	"let g:syntastic_cpp_compiler = 'clang++'
	"let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
	"let g:syntastic_error_symbol = 'x'
	"let g:syntastic_warning_symbol = '⚠'
	"let g:syntastic_enable_balloons = 1
	let g:syntastic_enable_signs = 0



"}

"ultisnips cfg {


	" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.

	"插入模式下直接通过ii键来触发UltiSnips的代码块补全
	let g:UltiSnipsExpandTrigger="<c-cr>"

	"弹出UltiSnips的可用列表,不常用的, 所以这里设置成了特殊的iI映射
	let g:UltiSnipsListSnippets="<c-s-l>"


	"跳转的到下一个代码块可编辑区
	let g:UltiSnipsJumpForwardTrigger="<tab>"

	"跳转到上一个代码块可编辑区
	let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

	" If you want :UltiSnipsEdit to split your window.
	let g:UltiSnipsEditSplit="vertical"

"}

"YouCompleteMe cfg {
	nmap <leader>gd :YcmDiags<CR>
	nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
	nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
	nnoremap <leader>gg :YcmCompleter GotoDefinitionElseDeclaration<CR>


	let g:ycm_global_ycm_extra_conf = 'D:\Program Files (x86)\Vim\vimfiles\bundle\YouCompleteMe\.ycm_extra_conf.py'
	let g:ycm_path_to_python_interpreter = ''
	let g:ycm_collect_identifiers_from_tags_files = 1
	let g:ycm_error_symbol = '>>'
	let g:ycm_warning_symbol = '>*'
	let g:ycm_min_num_of_chars_for_completion = 2 "from the second char start complete
	let g:ycm_cache_omnifunc = 0	"disable cache completing, reproduce complete everytime
	let g:ycm_seed_identifiers_with_syntax = 1  "syntax keyword complete
	let g:ycm_complete_in_comments = 1	"enable completing when commenting
	let g:ycm_collect_identifiers_from_comments_and_strings = 0
	let g:ycm_always_populate_location_list = 1
	set completeopt =longest,menu
	inoremap <expr> <CR> pumvisible() ? "\<c-y>" : "\<CR>"

	"ycm complete menu color
	"highlight Pmenu ctermfg=2 ctermbg=3 guifg=SeaGreen guibg=darkgreen
	highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#ccccff guibg=#6600ff

	"let g:ycm_seed_identifiers_with_syntax = 1
	let g:ycm_confirm_extra_conf = 0

	let g:ycm_autoclose_preview_window_after_completion = 1
"}

"ctrlp cfg {
	"cmds:
	"Ctrl-f:在Files, buffers, mru 三个列表中切换
    "Ctrl-d:Toggle between full-path and filename only search.
    "Ctrl-r:Toggle between the string mode and full regexp mode.
    "Ctrl-t:Open the selected file in a new tab.
    "Ctrl-v:Open the selected file in a vertical split.
    "Ctrl-x:Open the selected file in a horizontal split.
    "Ctrl-z:chose the file you want to open
    "F5:Refresh the match window and purge the cache for the current director
    let g:ctrlp_map = ',,'
    "let g:ctrlp_cmd ='CtrlPMixed'
    set wildignore+=*\\tmp\\*,*.swp,*.zip,*.o,tags
    let g:ctrlp_working_path_mode = 'ra'
	let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll|o|lib|png|jpg|a|obj)$',
            \ 'link': '',
            \ }

"}


"mru cfg {
	"let MRU_File = 'd:\_vim_mru_files' "change the file where you store the file
	nnoremap <silent> mr :MRU <CR>
	let MRU_Max_Entries = 1000 "remember 1000 most recently used file names
	let MRU_Exclude_Files = '^c:\\temp\\.*'
	let MRU_Include_Files = '\.c$\|\.h$\|\.cpp$\|\.pyw$\|\.py$'
	"the format"
	"let MRU_Filename_Format={'formatter':'v:val', 'parser':'.*'}

"}

"YankRing cfg{
	nnoremap <silent> <s-c> :YRShow<CR>
"}

"ListToggle cfg{
	let g:lt_location_list_toggle_map = '<leader>l'
	let g:lt_quickfix_list_toggle_map = '<leader>q'

	let g:lt_height = 10
"}


"easymotion cfg {
	let g:EasyMotion_do_mapping = 0 "diasble default mappings"
	"let g:EasyMotion_inc_highlight = 0
	"let g:EasyMotion_move_highlight = 0
	"let g:EasyMotion_landing_highlight = 0
	"type '1' and it matches both '1' and '!' in Find motion.
	let g:EasyMotion_use_smartsign_us = 1
	" Turn on case sensitive feature
	let g:EasyMotion_smartcase = 1


	let g:EasyMotion_prompt = '{n}>>> '
	nmap <leader><space> <Plug>(easymotion-lineanywhere)
	nmap / <Plug>(easymotion-sn)
	map <Leader>j <Plug>(easymotion-j)
	map <Leader>k <Plug>(easymotion-k)


	hi link EasyMotionTarget ErrorMsg
    hi link EasyMotionShade  Comment

"}

"Tabular cfg {
	map <leader>b :Tab /=<CR>
	map <leader>bb :Tab /=\zs<CR>
"}

"python cfg {
	map <F5> :echo "a" <bar> echo "b"<CR>
	function! RunFile()
		if &filetype == 'python'
			echo "python"
			let c = expand('%:e')
			echo c
			if expand('%:e')=='py3"
			else
				echo "python2"
			endif
		endif
	endfunction

"}

